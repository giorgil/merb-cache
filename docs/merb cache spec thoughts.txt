## Outline
	
	To provide a cleaner, more modular, heavier spec'd, more blackbox'd cache engine for Merb

## Not going to do, but happy for someone else to implement within the correct structure
	# Fragment caching
	# Page caching
		»	Same as action caching except something is written to a HTML file

## Functionality talk

	# Cache stores
		»	Mint cache (READ TOP OF: http://github.com/benschwarz/merb-more/tree/master/merb-cache/README)
		»	Others to be ported from existing merb-cache
	
	# Cache store wrapper "Rack for cache stores"	
	
	# Store caches using GZip compression (Like: http://github.com/tobi/cacheable/tree/master)
	
	# Action caching	
		# HTTP (Leverage existing standards and actually talk to the browser, rather than straight up serving)
			»	Only cache 200 responses
			»	Serve compressed caches using GZip if the client supports it
			»	Set ETag headers, amongst others
			»	Last-Modified header to the current date/time when a fresh (uncached) version of the page is requested.
		
		# Set to cache length time (minutes): 
			»	Expires header to the current date/time plus the defined 
			»	Cache-Control header to give a max age for the page 
		
		
	# Use whole request URI for cache key	
		»	domain.com/ not to cache the same as subdomain.domain.com/ on the same app
		
## API
	# Similar to existing API:
	  # Actions should only cache on get requests
		
		# CLASS
		cache_action :action, ttl, :key_params => [:id, :username]
		
		cache_actions [:action, [:action, ttl]]
		cache_actions [[:action, ttl], [:action, ttl]]
		cache_actions :exclude => [:index, :show] 
		
		
		################  EXAMPLE CLASS LEVEL CALLS
		cache_page :index
		
		cache_actions :expire_in => <seconds>
 		
		cache_action(:show, :store => :my_memcached_store) do |controller|
		  expire_in   <seconds>
		  keys = [:year, :month, :day, :name]
      
      if controller.current_user.is_admin?
        base_key "path/to/admin_area"
        keys.unshift(controller.current_user.id) # Need another array for the SHA
        key_params keys
      else
		    key_params keys
		  end		  
		end
		
		cache_actions :create, :update do |controller|
		  force_action_cache(controller, :show, :year => 2007, :month => 3, :day => 5)
		  force_action_cache(controller, :index)
		  force_fragment_cache(:some => "key")
		  do_not_cache_this_action!
		  # Need a way to tell force_action_cache that the action was successful
		end
		
		cache_action :edit, :expire_in => <seconds>
		
		################## END EXAMPLE
		
		Use a Merb::Cache::Proxy object to calculate the base key, params_key, and id_key or get the default
		Stick it into run method where we setup a 
		
		
		setup before :run_cache with whatever options are required
		opts
		p = Proc.new{ _run_cache(opts)  }
		before :only => [:show, :index] &p
		
		def _run_cache(opts)
		  CacheProxy.new(opts).run!(&(self.class._cache_store[action_name]))
		end
		
		Where run! yields to the given block
		
		CacheProxy should be able to read a cache param to force the cache.
		
		
		cache_actions :exclude => [:create, :delete, :update] do
		  
		end
		
		# INSTANCE METHODS
  		expire_action   :action
  		expire_actions [:action, :action]
  		cached? :action
  		cached? "key"
  		expire! "key"
  
  
  # Should only be get requests that are cached.  So URL should identify the params
  
  # Default Keys
  
  # Page Cache
    page cache key = Match the URL path with <action>.<format>   !!!ALWAYS!!!
    
  # Action Cache
    cache_action :action do 
      action_cache_key(:some => "additional", :param => "keys")
    end
    fragment_key_base + params_key( which is URL path) + id_keys as hash .format
    
  # Fragment Cache
    cache_fragment(  
    fragment_cache_key = fragment_key_base + params_key + id_key

	
	# New thoughts
	
		» Specify params wanted within caches (ones that are mapped to your urls!)
		
		For example:
			cache_action :action, ttl, [:username, :permalink]
			
		Therefore, then the posts controller is hit with a route to /benschwarz/think-about-caches (":username/:permalink")
		